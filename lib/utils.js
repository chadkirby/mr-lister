// Generated by CoffeeScript 1.6.2
(function() {
  var any, consolidateAlphaRanges, consolidateRanges, every, isInt, isNumber, unique;

  isNumber = function(n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
  };

  isInt = function(value) {
    return !isNaN(parseInt(value, 10)) && (parseFloat(value, 10) === parseInt(value, 10));
  };

  unique = function(arr) {
    var key, output, value, _i, _ref, _results;

    output = {};
    for (key = _i = 0, _ref = arr.length; 0 <= _ref ? _i < _ref : _i > _ref; key = 0 <= _ref ? ++_i : --_i) {
      output[arr[key]] = arr[key];
    }
    _results = [];
    for (key in output) {
      value = output[key];
      _results.push(value);
    }
    return _results;
  };

  consolidateRanges = function(inputArray, delimiter) {
    var arr, end, i, num, rangeBegs, rangeEnds, start, _i, _j, _len, _len1, _results;

    if (delimiter == null) {
      delimiter = '–';
    }
    arr = unique(inputArray).sort(function(a, b) {
      return a - b;
    });
    rangeEnds = [];
    rangeBegs = [];
    for (i = _i = 0, _len = arr.length; _i < _len; i = ++_i) {
      num = arr[i];
      if (num !== arr[i - 1] + 1) {
        rangeBegs.push(num);
      }
      if (num !== arr[i + 1] - 1) {
        rangeEnds.push(num);
      }
    }
    _results = [];
    for (i = _j = 0, _len1 = rangeBegs.length; _j < _len1; i = ++_j) {
      start = rangeBegs[i];
      end = rangeEnds[i];
      if (start === end) {
        _results.push(start);
      } else {
        _results.push("" + start + delimiter + end);
      }
    }
    return _results;
  };

  consolidateAlphaRanges = function(inputArray, delimiter) {
    var arr, end, i, ltr, rangeBegs, rangeEnds, start, _i, _j, _len, _len1, _ref, _ref1, _results;

    if (delimiter == null) {
      delimiter = '–';
    }
    arr = unique(inputArray).sort();
    rangeEnds = [];
    rangeBegs = [];
    for (i = _i = 0, _len = arr.length; _i < _len; i = ++_i) {
      ltr = arr[i];
      if (ltr.charCodeAt() !== ((_ref = arr[i - 1]) != null ? _ref.charCodeAt() : void 0) + 1) {
        rangeBegs.push(ltr);
      }
      if (ltr.charCodeAt() !== ((_ref1 = arr[i + 1]) != null ? _ref1.charCodeAt() : void 0) - 1) {
        rangeEnds.push(ltr);
      }
    }
    _results = [];
    for (i = _j = 0, _len1 = rangeBegs.length; _j < _len1; i = ++_j) {
      start = rangeBegs[i];
      end = rangeEnds[i];
      if (start === end) {
        _results.push(start);
      } else {
        _results.push("" + start + delimiter + end);
      }
    }
    return _results;
  };

  every = function(arr, testFn) {
    var i, item, _i, _len;

    for (i = _i = 0, _len = arr.length; _i < _len; i = ++_i) {
      item = arr[i];
      if (!testFn(item, i)) {
        return false;
      }
    }
    return true;
  };

  any = function(arr, testFn) {
    var i, item, _i, _len;

    for (i = _i = 0, _len = arr.length; _i < _len; i = ++_i) {
      item = arr[i];
      if (testFn(item, i)) {
        return true;
      }
    }
    return false;
  };

  module.exports = {
    isNumber: isNumber,
    isInt: isInt,
    unique: unique,
    every: every,
    any: any,
    consolidateRanges: consolidateRanges,
    consolidateAlphaRanges: consolidateAlphaRanges
  };

}).call(this);
