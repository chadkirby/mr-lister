// Generated by CoffeeScript 1.9.1
(function() {
  var any, consolidateAlphaRanges, consolidateRanges, every, isInt, isNumber, unique;

  isNumber = function(n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
  };

  isInt = function(value) {
    return !isNaN(parseInt(value, 10)) && (parseFloat(value, 10) === parseInt(value, 10));
  };

  unique = function(arr) {
    var j, key, output, ref, results, value;
    output = {};
    for (key = j = 0, ref = arr.length; 0 <= ref ? j < ref : j > ref; key = 0 <= ref ? ++j : --j) {
      output[arr[key]] = arr[key];
    }
    results = [];
    for (key in output) {
      value = output[key];
      results.push(value);
    }
    return results;
  };

  consolidateRanges = function(inputArray, delimiter) {
    var arr, end, i, j, k, len, len1, num, rangeBegs, rangeEnds, results, start;
    if (delimiter == null) {
      delimiter = '–';
    }
    arr = unique(inputArray).sort(function(a, b) {
      return a - b;
    });
    rangeEnds = [];
    rangeBegs = [];
    for (i = j = 0, len = arr.length; j < len; i = ++j) {
      num = arr[i];
      if (num !== arr[i - 1] + 1) {
        rangeBegs.push(num);
      }
      if (num !== arr[i + 1] - 1) {
        rangeEnds.push(num);
      }
    }
    results = [];
    for (i = k = 0, len1 = rangeBegs.length; k < len1; i = ++k) {
      start = rangeBegs[i];
      end = rangeEnds[i];
      if (start === end) {
        results.push(start);
      } else {
        results.push("" + start + delimiter + end);
      }
    }
    return results;
  };

  consolidateAlphaRanges = function(inputArray, delimiter) {
    var arr, end, i, j, k, len, len1, ltr, rangeBegs, rangeEnds, ref, ref1, results, start;
    if (delimiter == null) {
      delimiter = '–';
    }
    arr = unique(inputArray).sort();
    rangeEnds = [];
    rangeBegs = [];
    for (i = j = 0, len = arr.length; j < len; i = ++j) {
      ltr = arr[i];
      if (ltr.charCodeAt() !== ((ref = arr[i - 1]) != null ? ref.charCodeAt() : void 0) + 1) {
        rangeBegs.push(ltr);
      }
      if (ltr.charCodeAt() !== ((ref1 = arr[i + 1]) != null ? ref1.charCodeAt() : void 0) - 1) {
        rangeEnds.push(ltr);
      }
    }
    results = [];
    for (i = k = 0, len1 = rangeBegs.length; k < len1; i = ++k) {
      start = rangeBegs[i];
      end = rangeEnds[i];
      if (start === end) {
        results.push(start);
      } else {
        results.push("" + start + delimiter + end);
      }
    }
    return results;
  };

  every = function(arr, testFn) {
    var i, item, j, len;
    for (i = j = 0, len = arr.length; j < len; i = ++j) {
      item = arr[i];
      if (!testFn(item, i)) {
        return false;
      }
    }
    return true;
  };

  any = function(arr, testFn) {
    var i, item, j, len;
    for (i = j = 0, len = arr.length; j < len; i = ++j) {
      item = arr[i];
      if (testFn(item, i)) {
        return true;
      }
    }
    return false;
  };

  module.exports = {
    isNumber: isNumber,
    isInt: isInt,
    unique: unique,
    every: every,
    any: any,
    consolidateRanges: consolidateRanges,
    consolidateAlphaRanges: consolidateAlphaRanges
  };

}).call(this);
