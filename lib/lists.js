// Generated by CoffeeScript 1.6.2
(function() {
  var Articles, any, arr, consolidateAlphaRanges, consolidateRanges, every, i, isInt, isNumber, listString, test, unique, x, _i, _ref, _results;

  _ref = require('./utils'), isNumber = _ref.isNumber, isInt = _ref.isInt, unique = _ref.unique, consolidateRanges = _ref.consolidateRanges, consolidateAlphaRanges = _ref.consolidateAlphaRanges, every = _ref.every, any = _ref.any;

  Articles = require('Articles');

  listString = function(inputArray, andor, article, comma) {
    var a, andOrProvided, arr, complex, delimiter, isRange, item;

    if (comma == null) {
      comma = ', ';
    }
    isRange = andor == null;
    if (andor == null) {
      andor = 'and';
    }
    andOrProvided = (andor != null ? andor.length : void 0) > 0;
    isRange = every(inputArray, isInt);
    if (isRange) {
      arr = consolidateRanges((function() {
        var _i, _len, _results;

        _results = [];
        for (_i = 0, _len = inputArray.length; _i < _len; _i++) {
          a = inputArray[_i];
          _results.push(parseInt(a));
        }
        return _results;
      })());
    } else {
      isRange = every(inputArray, function(item) {
        return /^[a-z]$/i.test(item);
      });
      if (isRange) {
        arr = consolidateAlphaRanges(inputArray);
      }
    }
    if (inputArray.length > 2) {
      if (isRange) {
        if (arr.length > 2) {
          delimiter = comma;
        }
      } else {
        complex = any(inputArray, function(item) {
          return /,/.test(item);
        });
        delimiter = complex ? '; ' : comma;
      }
    }
    if (delimiter == null) {
      delimiter = andOrProvided ? andor : '';
      if (/^[\w\/]+$/i.test(delimiter)) {
        delimiter = " " + delimiter + " ";
      }
    }
    if (arr == null) {
      arr = inputArray.slice(0);
    }
    if (/^an?$/.test(article)) {
      arr = (function() {
        var _i, _len, _results;

        _results = [];
        for (_i = 0, _len = arr.length; _i < _len; _i++) {
          item = arr[_i];
          _results.push(Articles.articlize(item));
        }
        return _results;
      })();
    } else if ((article != null ? article.length : void 0) > 0) {
      arr = (function() {
        var _i, _len, _results;

        _results = [];
        for (_i = 0, _len = arr.length; _i < _len; _i++) {
          item = arr[_i];
          _results.push("" + article + " " + item);
        }
        return _results;
      })();
    }
    if (andOrProvided && (arr.length > 2)) {
      arr.push("" + andor + " " + (arr.pop()));
    }
    return arr.join(delimiter);
  };

  listString.pollute = function() {
    return Object.defineProperty(Array.prototype, "listString", {
      writable: true,
      enumerable: false,
      configurable: true,
      value: function(andor, article, comma) {
        if (comma == null) {
          comma = ', ';
        }
        return listString(this, andor, article, comma);
      }
    });
  };

  module.exports = listString;

  if (require.main === module) {
    test = function(item) {
      return /\d/.test(item);
    };
    arr = (function() {
      _results = [];
      for (_i = 1; _i <= 1000; _i++){ _results.push(_i); }
      return _results;
    }).apply(this);
    console.time('every');
    x = (function() {
      var _j, _results1;

      _results1 = [];
      for (i = _j = 1; _j <= 1000; i = ++_j) {
        _results1.push(arr.every(test));
      }
      return _results1;
    })();
    console.timeEnd('every');
    console.time('myevery');
    x = (function() {
      var _j, _results1;

      _results1 = [];
      for (i = _j = 1; _j <= 1000; i = ++_j) {
        _results1.push(every(arr, test));
      }
      return _results1;
    })();
    console.timeEnd('myevery');
  }

}).call(this);
